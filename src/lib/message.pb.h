// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class HeartBeatMessage;
class HeartBeatMessageDefaultTypeInternal;
extern HeartBeatMessageDefaultTypeInternal _HeartBeatMessage_default_instance_;
class TextMessage;
class TextMessageDefaultTypeInternal;
extern TextMessageDefaultTypeInternal _TextMessage_default_instance_;

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

// ===================================================================

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  enum TestOneofCase {
    kHeartBeat = 4,
    kTextMessage = 5,
    TEST_ONEOF_NOT_SET = 0,
  };

  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 from_id = 1;
  void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  ::google::protobuf::int32 from_id() const;
  void set_from_id(::google::protobuf::int32 value);

  // int32 to_id = 2;
  void clear_to_id();
  static const int kToIdFieldNumber = 2;
  ::google::protobuf::int32 to_id() const;
  void set_to_id(::google::protobuf::int32 value);

  // int32 lc_id = 3;
  void clear_lc_id();
  static const int kLcIdFieldNumber = 3;
  ::google::protobuf::int32 lc_id() const;
  void set_lc_id(::google::protobuf::int32 value);

  // .HeartBeatMessage heart_beat = 4;
  bool has_heart_beat() const;
  void clear_heart_beat();
  static const int kHeartBeatFieldNumber = 4;
  const ::HeartBeatMessage& heart_beat() const;
  ::HeartBeatMessage* mutable_heart_beat();
  ::HeartBeatMessage* release_heart_beat();
  void set_allocated_heart_beat(::HeartBeatMessage* heart_beat);

  // .TextMessage text_message = 5;
  bool has_text_message() const;
  void clear_text_message();
  static const int kTextMessageFieldNumber = 5;
  const ::TextMessage& text_message() const;
  ::TextMessage* mutable_text_message();
  ::TextMessage* release_text_message();
  void set_allocated_text_message(::TextMessage* text_message);

  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:
  void set_has_heart_beat();
  void set_has_text_message();

  inline bool has_test_oneof() const;
  void clear_test_oneof();
  inline void clear_has_test_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 from_id_;
  ::google::protobuf::int32 to_id_;
  ::google::protobuf::int32 lc_id_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::HeartBeatMessage* heart_beat_;
    ::TextMessage* text_message_;
  } test_oneof_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TextMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TextMessage) */ {
 public:
  TextMessage();
  virtual ~TextMessage();

  TextMessage(const TextMessage& from);

  inline TextMessage& operator=(const TextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextMessage(TextMessage&& from) noexcept
    : TextMessage() {
    *this = ::std::move(from);
  }

  inline TextMessage& operator=(TextMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextMessage& default_instance();

  static inline const TextMessage* internal_default_instance() {
    return reinterpret_cast<const TextMessage*>(
               &_TextMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TextMessage* other);
  friend void swap(TextMessage& a, TextMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TextMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextMessage& from);
  void MergeFrom(const TextMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:TextMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HeartBeatMessage) */ {
 public:
  HeartBeatMessage();
  virtual ~HeartBeatMessage();

  HeartBeatMessage(const HeartBeatMessage& from);

  inline HeartBeatMessage& operator=(const HeartBeatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatMessage(HeartBeatMessage&& from) noexcept
    : HeartBeatMessage() {
    *this = ::std::move(from);
  }

  inline HeartBeatMessage& operator=(HeartBeatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatMessage& default_instance();

  static inline const HeartBeatMessage* internal_default_instance() {
    return reinterpret_cast<const HeartBeatMessage*>(
               &_HeartBeatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HeartBeatMessage* other);
  friend void swap(HeartBeatMessage& a, HeartBeatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartBeatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartBeatMessage& from);
  void MergeFrom(const HeartBeatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartBeatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HeartBeatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// int32 from_id = 1;
inline void ChatMessage::clear_from_id() {
  from_id_ = 0;
}
inline ::google::protobuf::int32 ChatMessage::from_id() const {
  // @@protoc_insertion_point(field_get:ChatMessage.from_id)
  return from_id_;
}
inline void ChatMessage::set_from_id(::google::protobuf::int32 value) {
  
  from_id_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.from_id)
}

// int32 to_id = 2;
inline void ChatMessage::clear_to_id() {
  to_id_ = 0;
}
inline ::google::protobuf::int32 ChatMessage::to_id() const {
  // @@protoc_insertion_point(field_get:ChatMessage.to_id)
  return to_id_;
}
inline void ChatMessage::set_to_id(::google::protobuf::int32 value) {
  
  to_id_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.to_id)
}

// int32 lc_id = 3;
inline void ChatMessage::clear_lc_id() {
  lc_id_ = 0;
}
inline ::google::protobuf::int32 ChatMessage::lc_id() const {
  // @@protoc_insertion_point(field_get:ChatMessage.lc_id)
  return lc_id_;
}
inline void ChatMessage::set_lc_id(::google::protobuf::int32 value) {
  
  lc_id_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.lc_id)
}

// .HeartBeatMessage heart_beat = 4;
inline bool ChatMessage::has_heart_beat() const {
  return test_oneof_case() == kHeartBeat;
}
inline void ChatMessage::set_has_heart_beat() {
  _oneof_case_[0] = kHeartBeat;
}
inline void ChatMessage::clear_heart_beat() {
  if (has_heart_beat()) {
    delete test_oneof_.heart_beat_;
    clear_has_test_oneof();
  }
}
inline  const ::HeartBeatMessage& ChatMessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:ChatMessage.heart_beat)
  return has_heart_beat()
      ? *test_oneof_.heart_beat_
      : ::HeartBeatMessage::default_instance();
}
inline ::HeartBeatMessage* ChatMessage::mutable_heart_beat() {
  if (!has_heart_beat()) {
    clear_test_oneof();
    set_has_heart_beat();
    test_oneof_.heart_beat_ = new ::HeartBeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:ChatMessage.heart_beat)
  return test_oneof_.heart_beat_;
}
inline ::HeartBeatMessage* ChatMessage::release_heart_beat() {
  // @@protoc_insertion_point(field_release:ChatMessage.heart_beat)
  if (has_heart_beat()) {
    clear_has_test_oneof();
    ::HeartBeatMessage* temp = test_oneof_.heart_beat_;
    test_oneof_.heart_beat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ChatMessage::set_allocated_heart_beat(::HeartBeatMessage* heart_beat) {
  clear_test_oneof();
  if (heart_beat) {
    set_has_heart_beat();
    test_oneof_.heart_beat_ = heart_beat;
  }
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.heart_beat)
}

// .TextMessage text_message = 5;
inline bool ChatMessage::has_text_message() const {
  return test_oneof_case() == kTextMessage;
}
inline void ChatMessage::set_has_text_message() {
  _oneof_case_[0] = kTextMessage;
}
inline void ChatMessage::clear_text_message() {
  if (has_text_message()) {
    delete test_oneof_.text_message_;
    clear_has_test_oneof();
  }
}
inline  const ::TextMessage& ChatMessage::text_message() const {
  // @@protoc_insertion_point(field_get:ChatMessage.text_message)
  return has_text_message()
      ? *test_oneof_.text_message_
      : ::TextMessage::default_instance();
}
inline ::TextMessage* ChatMessage::mutable_text_message() {
  if (!has_text_message()) {
    clear_test_oneof();
    set_has_text_message();
    test_oneof_.text_message_ = new ::TextMessage;
  }
  // @@protoc_insertion_point(field_mutable:ChatMessage.text_message)
  return test_oneof_.text_message_;
}
inline ::TextMessage* ChatMessage::release_text_message() {
  // @@protoc_insertion_point(field_release:ChatMessage.text_message)
  if (has_text_message()) {
    clear_has_test_oneof();
    ::TextMessage* temp = test_oneof_.text_message_;
    test_oneof_.text_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ChatMessage::set_allocated_text_message(::TextMessage* text_message) {
  clear_test_oneof();
  if (text_message) {
    set_has_text_message();
    test_oneof_.text_message_ = text_message;
  }
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.text_message)
}

inline bool ChatMessage::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void ChatMessage::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline ChatMessage::TestOneofCase ChatMessage::test_oneof_case() const {
  return ChatMessage::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TextMessage

// string message = 1;
inline void TextMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextMessage::message() const {
  // @@protoc_insertion_point(field_get:TextMessage.message)
  return message_.GetNoArena();
}
inline void TextMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TextMessage.message)
}
#if LANG_CXX11
inline void TextMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TextMessage.message)
}
#endif
inline void TextMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TextMessage.message)
}
inline void TextMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TextMessage.message)
}
inline ::std::string* TextMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:TextMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextMessage::release_message() {
  // @@protoc_insertion_point(field_release:TextMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TextMessage.message)
}

// -------------------------------------------------------------------

// HeartBeatMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
